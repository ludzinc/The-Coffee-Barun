CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 1

ADDR CODE  LINE SOURCE

           0001 
           0002 ; CC5X Version 3.2, Copyright (c) B Knudsen Data
           0003 ; C compiler for the PICmicro family
           0004 ; ************   2. Sep 2011  12:59  *************
           0005 
           0006 	processor  16F627A
           0007 	radix  DEC
           0008 
     0000  0009 INDF        EQU   0x00
     0003  0010 STATUS      EQU   0x03
     0004  0011 FSR         EQU   0x04
     0005  0012 PORTA       EQU   0x05
     0085  0013 TRISA       EQU   0x85
     0006  0014 PORTB       EQU   0x06
     0086  0015 TRISB       EQU   0x86
     000B  0016 INTCON      EQU   0x0B
     0000  0017 Carry       EQU   0
     0002  0018 Zero_       EQU   2
     0005  0019 RP0         EQU   5
     0006  0020 RP1         EQU   6
     0007  0021 IRP         EQU   7
     0081  0022 OPTION_REG  EQU   0x81
     000C  0023 PIR1        EQU   0x0C
     0012  0024 T2CON       EQU   0x12
     001F  0025 CMCON       EQU   0x1F
     008C  0026 PIE1        EQU   0x8C
     008E  0027 PCON        EQU   0x8E
     0092  0028 PR2         EQU   0x92
     0000  0029 RA0         EQU   0
     0001  0030 RA1         EQU   1
     0002  0031 RA2         EQU   2
     0003  0032 RA3         EQU   3
     0006  0033 RA6         EQU   6
     0007  0034 RA7         EQU   7
     0004  0035 RB4         EQU   4
     0005  0036 RB5         EQU   5
     0001  0037 TMR2IF      EQU   1
     0032  0038 FSRTemp     EQU   0x32
     0033  0039 T2ms        EQU   0x33
     0034  0040 T10ms       EQU   0x34
     0035  0041 T100ms      EQU   0x35
     0036  0042 BlinkCounter EQU   0x36
     0037  0043 BlinkState  EQU   0x37
     0038  0044 DigitCounter EQU   0x38
     0039  0045 DispValue   EQU   0x39
     003B  0046 Digit       EQU   0x3B
     003F  0047 SecondsFlag EQU   0x3F
     0040  0048 StartButtonState EQU   0x40
     0041  0049 StartButtonPrev EQU   0x41
     0042  0050 StartButtonCounter EQU   0x42
     0043  0051 StopButtonState EQU   0x43
     0044  0052 StopButtonPrev EQU   0x44
     0045  0053 StopButtonCounter EQU   0x45
     0046  0054 State1      EQU   0x46
     0070  0055 svrWREG     EQU   0x70
     0020  0056 svrSTATUS   EQU   0x20
     0027  0057 Seconds     EQU   0x27
     0028  0058 Minutes     EQU   0x28
     0029  0059 Timing      EQU   0x29
     002A  0060 START       EQU   0x2A
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 2

ADDR CODE  LINE SOURCE

     002B  0061 STOP        EQU   0x2B
     002C  0062 StartLock   EQU   0x2C
     002D  0063 StopLock    EQU   0x2D
     002E  0064 temp        EQU   0x2E
     0021  0065 DigitCounter_2 EQU   0x21
     0021  0066 temp_2      EQU   0x21
     0023  0067 C1cnt       EQU   0x23
     0024  0068 C2tmp       EQU   0x24
     0023  0069 C3cnt       EQU   0x23
     0024  0070 C4tmp       EQU   0x24
     0026  0071 C5rem       EQU   0x26
     0023  0072 C6cnt       EQU   0x23
     0024  0073 C7tmp       EQU   0x24
     0023  0074 C8cnt       EQU   0x23
     0024  0075 C9tmp       EQU   0x24
     0023  0076 C10cnt      EQU   0x23
     0024  0077 C11tmp      EQU   0x24
     0026  0078 C12rem      EQU   0x26
     0023  0079 C13cnt      EQU   0x23
     0024  0080 C14tmp      EQU   0x24
     002F  0081 test        EQU   0x2F
     0030  0082 state       EQU   0x30
     0031  0083 counter     EQU   0x31
           0084 
0000 2840  0085 	GOTO main
           0086 
           0087   ; FILE TIMER.c
           0088 			;//#define   PIC16F627A
           0089 			;
           0090 			;//#include "16F627A.H"
           0091 			;#include "INT16CXX.H"
           0092 			;
           0093 			;#pragma origin = 0x0004																	
                   // CHECK THIS IN DATASHEET.  WHAT 0x0004 ???
     0000  0094 	ORG 0x0004
           0095 			;#pragma config        = 0b0011.1111.0101.1000   	// MCLR Pin is input
           0096 			;//#pragma config        = 0b0011.1111.0111.1000   	// MCLR Pin is input
           0097 			;
           0098 			;#define BCD_A			RB0		// OUTPUT, BIT0 BCD WORD
           0099 			;#define BCD_B      		RB1   	// OUTPUT, BIT1 BCD WORD  
           0100 			;#define BCD_C			RB2   	// OUTPUT, BIT2 BCD WORD		
           0101 			;#define BCD_D	 	 	RB3   	// OUTPUT, BIT3 BCD WORD		
           0102 			;#define MC14543_LD_CTRL	RB5		// Rising Edge Load to BCD DRiver
           0103 			;
           0104 			;#define DISP0			RA6
           0105 			;#define DISP1			RB4
           0106 			;#define DISP2			RA3	
           0107 			;#define DISP3			RA2
           0108 			;
           0109 			;#define DECIMAL			RA7
           0110 			;
           0111 			;#define StartButton		RA0
           0112 			;#define StopButton		RA1
           0113 			;
           0114 			;#define MAX_DEBOUNCE_COUNT 	10			// How many times do we need the changed state = 100 ms
           0115 			;#define STATE_STOPPED 		0
           0116 			;#define STATE_STARTED 		1
           0117 			;#define STATE_PAUSED		2
           0118 			;
           0119 			;#define MaxBlink			100			// blink every 2ms * MaxBlink
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 3

ADDR CODE  LINE SOURCE

           0120 			;
           0121 			;
           0122 			;// Declare Function Prototypes
           0123 			;void InitialiseHardware(void);
           0124 			;void InitialiseGlobals(void);
           0125 			;void DisplayDigit(char DigitCounter);
           0126 			;void Dec2BCD(void);
           0127 			;void debounce(char test, char *state, char *counter);
           0128 			;
           0129 			;char FSRTemp;
           0130 			;char T2ms;								// 2 millisecond counter
           0131 			;char T10ms;								// 10's millisecond counter
           0132 			;char T100ms;							// 100's millisecond counter
           0133 			;
           0134 			;char BlinkCounter;						// increment every 2 millisecond, allows blinking when paused in mutliples of 2ms
           0135 			;char BlinkState;						// might be needed
           0136 			;
           0137 			;char DigitCounter;
           0138 			;uns16 DispValue;		// unsigned 16 bit integer
           0139 			;char Digit[4];
           0140 			;char SecondsFlag;
           0141 			;char StartButtonState;
           0142 			;char StartButtonPrev;
           0143 			;char StartButtonCounter;
           0144 			;char StopButtonState;
           0145 			;char StopButtonPrev;
           0146 			;char StopButtonCounter;
           0147 			;char State1;
           0148 			;
           0149 			;#pragma codepage 0
           0150 			;interrupt IntHandler() {
           0151 IntHandler
           0152 			;   	int_save_registers
0004 00F0  0153 	MOVWF svrWREG
0005 0E03  0154 	SWAPF STATUS,W
0006 1283  0155 	BCF   0x03,RP0
0007 1303  0156 	BCF   0x03,RP1
0008 00A0  0157 	MOVWF svrSTATUS
           0158 			;   	FSRTemp = FSR;
0009 0804  0159 	MOVF  FSR,W
000A 00B2  0160 	MOVWF FSRTemp
           0161 			;	if (TMR2IF == 1) {
000B 1C8C  0162 	BTFSS 0x0C,TMR2IF
000C 2839  0163 	GOTO  m004
           0164 			;		DigitCounter++;				// Every 2ms Update the display digits
000D 0AB8  0165 	INCF  DigitCounter,1
           0166 			;		if (DigitCounter == 4) {	// 0 = Units, 1 = tens, 2 = hundreds, 3 = thousands
000E 0838  0167 	MOVF  DigitCounter,W
000F 3A04  0168 	XORLW .4
0010 1903  0169 	BTFSC 0x03,Zero_
           0170 			;			DigitCounter = 0;
0011 01B8  0171 	CLRF  DigitCounter
           0172 			;		}
           0173 			;		Dec2BCD();
0012 210A  0174 	CALL  Dec2BCD
           0175 			;		DisplayDigit(DigitCounter);
0013 0838  0176 	MOVF  DigitCounter,W
0014 20E2  0177 	CALL  DisplayDigit
           0178 			;		
           0179 			;		BlinkCounter++;
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 4

ADDR CODE  LINE SOURCE

0015 0AB6  0180 	INCF  BlinkCounter,1
           0181 			;		{
           0182 			;			if (BlinkCounter > MaxBlink) {
0016 3065  0183 	MOVLW .101
0017 0236  0184 	SUBWF BlinkCounter,W
0018 1C03  0185 	BTFSS 0x03,Carry
0019 2822  0186 	GOTO  m002
           0187 			;				BlinkCounter = 0;
001A 01B6  0188 	CLRF  BlinkCounter
           0189 			;				if(BlinkState==0){
001B 08B7  0190 	MOVF  BlinkState,1
001C 1D03  0191 	BTFSS 0x03,Zero_
001D 2821  0192 	GOTO  m001
           0193 			;					BlinkState=1;
001E 3001  0194 	MOVLW .1
001F 00B7  0195 	MOVWF BlinkState
           0196 			;				} else {
0020 2822  0197 	GOTO  m002
           0198 			;					BlinkState =0;
0021 01B7  0199 m001	CLRF  BlinkState
           0200 			;				}	
           0201 			;			}
           0202 			;		}		
           0203 			;
           0204 			;		if (State1 == STATE_STARTED) {
0022 0B46  0205 m002	DECFSZ State1,W
0023 2838  0206 	GOTO  m003
           0207 			;			T2ms++;
0024 0AB3  0208 	INCF  T2ms,1
           0209 			;			if (T2ms == 5) {
0025 0833  0210 	MOVF  T2ms,W
0026 3A05  0211 	XORLW .5
0027 1D03  0212 	BTFSS 0x03,Zero_
0028 2838  0213 	GOTO  m003
           0214 			;				T10ms++;
0029 0AB4  0215 	INCF  T10ms,1
           0216 			;				T2ms = 0;
002A 01B3  0217 	CLRF  T2ms
           0218 			;				if (T10ms == 10) {
002B 0834  0219 	MOVF  T10ms,W
002C 3A0A  0220 	XORLW .10
002D 1D03  0221 	BTFSS 0x03,Zero_
002E 2838  0222 	GOTO  m003
           0223 			;					T100ms++;
002F 0AB5  0224 	INCF  T100ms,1
           0225 			;					T10ms = 0;
0030 01B4  0226 	CLRF  T10ms
           0227 			;					if (T100ms == 10) {
0031 0835  0228 	MOVF  T100ms,W
0032 3A0A  0229 	XORLW .10
0033 1D03  0230 	BTFSS 0x03,Zero_
0034 2838  0231 	GOTO  m003
           0232 			;						T100ms = 0;
0035 01B5  0233 	CLRF  T100ms
           0234 			;						SecondsFlag = 1;
0036 3001  0235 	MOVLW .1
0037 00BF  0236 	MOVWF SecondsFlag
           0237 			;					}
           0238 			;				}
           0239 			;			}
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 5

ADDR CODE  LINE SOURCE

           0240 			;		}
           0241 			;		TMR2IF = 0;
0038 108C  0242 m003	BCF   0x0C,TMR2IF
           0243 			;	}
           0244 			;   	FSR = FSRTemp;
0039 0832  0245 m004	MOVF  FSRTemp,W
003A 0084  0246 	MOVWF FSR
           0247 			;   	int_restore_registers
003B 0E20  0248 	SWAPF svrSTATUS,W
003C 0083  0249 	MOVWF STATUS
003D 0EF0  0250 	SWAPF svrWREG,1
003E 0E70  0251 	SWAPF svrWREG,W
           0252 			;}
003F 0009  0253 	RETFIE
           0254 			;
           0255 			;void main(void) {
           0256 main
           0257 			;	int Seconds =00;
0040 1283  0258 	BCF   0x03,RP0
0041 1303  0259 	BCF   0x03,RP1
0042 01A7  0260 	CLRF  Seconds
           0261 			;	int Minutes =00;
0043 01A8  0262 	CLRF  Minutes
           0263 			;	char Timing=0;
0044 01A9  0264 	CLRF  Timing
           0265 			;	char START =0;
0045 01AA  0266 	CLRF  START
           0267 			;	char STOP =0;
0046 01AB  0268 	CLRF  STOP
           0269 			;	char StartLock =0;
0047 01AC  0270 	CLRF  StartLock
           0271 			;	char StopLock =0;
0048 01AD  0272 	CLRF  StopLock
           0273 			;	char temp =0;
0049 01AE  0274 	CLRF  temp
           0275 			;
           0276 			;	InitialiseHardware();
004A 1683  0277 	BSF   0x03,RP0
004B 20AA  0278 	CALL  InitialiseHardware
           0279 			;	InitialiseGlobals();
004C 20D0  0280 	CALL  InitialiseGlobals
           0281 			;
           0282 			;	while (1) {
           0283 			;		debounce(StartButton, &StartButtonState, &StartButtonCounter);
004D 01AF  0284 m005	CLRF  test
004E 1805  0285 	BTFSC 0x05,RA0
004F 0AAF  0286 	INCF  test,1
0050 3040  0287 	MOVLW .64
0051 00B0  0288 	MOVWF state
0052 3042  0289 	MOVLW .66
0053 00B1  0290 	MOVWF counter
0054 21C9  0291 	CALL  debounce
           0292 			;		debounce(StopButton, &StopButtonState, &StopButtonCounter);
0055 01AF  0293 	CLRF  test
0056 1885  0294 	BTFSC 0x05,RA1
0057 0AAF  0295 	INCF  test,1
0058 3043  0296 	MOVLW .67
0059 00B0  0297 	MOVWF state
005A 3045  0298 	MOVLW .69
005B 00B1  0299 	MOVWF counter
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 6

ADDR CODE  LINE SOURCE

005C 21C9  0300 	CALL  debounce
           0301 			;		
           0302 			;		if(StartButtonState == 0) {
005D 08C0  0303 	MOVF  StartButtonState,1
005E 1903  0304 	BTFSC 0x03,Zero_
           0305 			;			StartLock = 0;
005F 01AC  0306 	CLRF  StartLock
           0307 			;		}
           0308 			;		if(StopButtonState == 0) {
0060 08C3  0309 	MOVF  StopButtonState,1
0061 1903  0310 	BTFSC 0x03,Zero_
           0311 			;			StopLock = 0;
0062 01AD  0312 	CLRF  StopLock
           0313 			;		}
           0314 			;
           0315 			;		if ((StartButtonState == 1) && (StartLock == 0)) {
0063 0B40  0316 	DECFSZ StartButtonState,W
0064 2876  0317 	GOTO  m008
0065 08AC  0318 	MOVF  StartLock,1
0066 1D03  0319 	BTFSS 0x03,Zero_
0067 2876  0320 	GOTO  m008
           0321 			;			StartLock = 1;									// Lock out until button is released
0068 3001  0322 	MOVLW .1
0069 00AC  0323 	MOVWF StartLock
           0324 			;			if(State1 == STATE_STOPPED  || State1 == STATE_PAUSED) {		
006A 08C6  0325 	MOVF  State1,1
006B 1903  0326 	BTFSC 0x03,Zero_
006C 2871  0327 	GOTO  m006
006D 0846  0328 	MOVF  State1,W
006E 3A02  0329 	XORLW .2
006F 1D03  0330 	BTFSS 0x03,Zero_
0070 2874  0331 	GOTO  m007
           0332 			;				State1 = STATE_STARTED;						// Start timing if currently stopped
0071 3001  0333 m006	MOVLW .1
0072 00C6  0334 	MOVWF State1
           0335 			;			} else {
0073 2876  0336 	GOTO  m008
           0337 			;//				State1 = STATE_STOPPED;						// stop timing - doesn't reset anything (Paused)
           0338 			;				State1 = STATE_PAUSED;
0074 3002  0339 m007	MOVLW .2
0075 00C6  0340 	MOVWF State1
           0341 			;			}	
           0342 			;		}
           0343 			;/*		
           0344 			;		if ((StartButtonState == 1) && (StartLock == 1)) {
           0345 			;			StartLock = 1;									// Lock out until button is released
           0346 			;			if(State1 == STATE_PAUSED) {		
           0347 			;				State1 = STATE_STARTED;						// Start timing if currently stopped
           0348 			;			}	
           0349 			;		}	
           0350 			;*/		
           0351 			;		    
           0352 			;	    if((StopButtonState == 1) && (StopLock == 0)) {
0076 0B43  0353 m008	DECFSZ StopButtonState,W
0077 288B  0354 	GOTO  m010
0078 08AD  0355 	MOVF  StopLock,1
0079 1D03  0356 	BTFSS 0x03,Zero_
007A 288B  0357 	GOTO  m010
           0358 			;		    StopLock = 1;									// Lock out until button is released
007B 3001  0359 	MOVLW .1
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 7

ADDR CODE  LINE SOURCE

007C 00AD  0360 	MOVWF StopLock
           0361 			;			if(State1 == STATE_STARTED) {	
007D 0B46  0362 	DECFSZ State1,W
007E 2882  0363 	GOTO  m009
           0364 			;//				State1 = STATE_STOPPED;						// Stop timing if currently running but don't reset (Paused)
           0365 			;				State1 = STATE_PAUSED;						// When paused, blink display
007F 3002  0366 	MOVLW .2
0080 00C6  0367 	MOVWF State1
           0368 			;			} else {
0081 288B  0369 	GOTO  m010
           0370 			;				DispValue = 0;								// If in routine for 2nd instance clear timers (Stop pre
                   ssed after being paused)
0082 01B9  0371 m009	CLRF  DispValue
0083 01BA  0372 	CLRF  DispValue+1
           0373 			;				Minutes = 0;
0084 01A8  0374 	CLRF  Minutes
           0375 			;				Seconds = 0;
0085 01A7  0376 	CLRF  Seconds
           0377 			;				SecondsFlag = 0;
0086 01BF  0378 	CLRF  SecondsFlag
           0379 			;				T2ms = 0;
0087 01B3  0380 	CLRF  T2ms
           0381 			;				T10ms = 0;
0088 01B4  0382 	CLRF  T10ms
           0383 			;				T100ms = 0;
0089 01B5  0384 	CLRF  T100ms
           0385 			;				State1 = STATE_STOPPED;
008A 01C6  0386 	CLRF  State1
           0387 			;			} 
           0388 			;		}
           0389 			;		
           0390 			;		if (State1 == STATE_STARTED) {
008B 0B46  0391 m010	DECFSZ State1,W
008C 284D  0392 	GOTO  m005
           0393 			;			if (SecondsFlag) {
008D 08BF  0394 	MOVF  SecondsFlag,1
008E 1903  0395 	BTFSC 0x03,Zero_
008F 284D  0396 	GOTO  m005
           0397 			;				SecondsFlag = 0;
0090 01BF  0398 	CLRF  SecondsFlag
           0399 			;				Seconds++;
0091 0AA7  0400 	INCF  Seconds,1
           0401 			;				if (Seconds == 60) {
0092 0827  0402 	MOVF  Seconds,W
0093 3A3C  0403 	XORLW .60
0094 1D03  0404 	BTFSS 0x03,Zero_
0095 289C  0405 	GOTO  m011
           0406 			;					Minutes++;
0096 0AA8  0407 	INCF  Minutes,1
           0408 			;					Seconds = 0;
0097 01A7  0409 	CLRF  Seconds
           0410 			;					if(Minutes == 100) {
0098 0828  0411 	MOVF  Minutes,W
0099 3A64  0412 	XORLW .100
009A 1903  0413 	BTFSC 0x03,Zero_
           0414 			;						Minutes = 0;
009B 01A8  0415 	CLRF  Minutes
           0416 			;					}
           0417 			;				}	
           0418 			;				DispValue=Minutes;
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 8

ADDR CODE  LINE SOURCE

009C 0828  0419 m011	MOVF  Minutes,W
009D 00B9  0420 	MOVWF DispValue
009E 01BA  0421 	CLRF  DispValue+1
009F 1BB9  0422 	BTFSC DispValue,7
00A0 03BA  0423 	DECF  DispValue+1,1
           0424 			;				DispValue=DispValue<<8;
00A1 00BA  0425 	MOVWF DispValue+1
00A2 01B9  0426 	CLRF  DispValue
           0427 			;				DispValue=DispValue+Seconds;
00A3 0827  0428 	MOVF  Seconds,W
00A4 07B9  0429 	ADDWF DispValue,1
00A5 1803  0430 	BTFSC 0x03,Carry
00A6 0ABA  0431 	INCF  DispValue+1,1
00A7 1BA7  0432 	BTFSC Seconds,7
00A8 03BA  0433 	DECF  DispValue+1,1
           0434 			;			}
           0435 			;		}
           0436 			;	}
00A9 284D  0437 	GOTO  m005
           0438 			;}// end main()
           0439 			;
           0440 			;
           0441 			;void InitialiseHardware(void) {
           0442 InitialiseHardware
           0443 			;  	TRISA  = 0b00100011; 				// PORTA (0 = OUTPUT)
00AA 3023  0444 	MOVLW .35
00AB 0085  0445 	MOVWF TRISA
           0446 			;	PORTA  = 0b11011100;				// Initialise PORTA
00AC 30DC  0447 	MOVLW .220
00AD 1283  0448 	BCF   0x03,RP0
00AE 0085  0449 	MOVWF PORTA
           0450 			;	TRISB  = 0b11000000;      			// PORTB (0 = OUTPUT)
00AF 30C0  0451 	MOVLW .192
00B0 1683  0452 	BSF   0x03,RP0
00B1 0086  0453 	MOVWF TRISB
           0454 			;	PORTB  = 0b00000000;				// Initialise PORTB
00B2 1283  0455 	BCF   0x03,RP0
00B3 0186  0456 	CLRF  PORTB
           0457 			;	OPTION = 0b10001000;   				// No weak pull ups, prescaler assigned to WDT
00B4 3088  0458 	MOVLW .136
00B5 1683  0459 	BSF   0x03,RP0
00B6 0081  0460 	MOVWF OPTION_REG
           0461 			;   	INTCON = 0b11000000;				// TMR2 used to provide 1ms ticks.
00B7 30C0  0462 	MOVLW .192
00B8 008B  0463 	MOVWF INTCON
           0464 			;	CMCON  = 0b00000111;				// Enable RA0:3 as Digital Inputs
00B9 3007  0465 	MOVLW .7
00BA 1283  0466 	BCF   0x03,RP0
00BB 009F  0467 	MOVWF CMCON
           0468 			;	PCON   = 0b00001000;				// Set internal osciallator to 4MHz
00BC 3008  0469 	MOVLW .8
00BD 1683  0470 	BSF   0x03,RP0
00BE 008E  0471 	MOVWF PCON
           0472 			;	T2CON  = 0b00001101;				// TMR2 on, prescale = 1:4, and postscale = 1:2  (8us ticks with 4MHz oscillator)
00BF 300D  0473 	MOVLW .13
00C0 1283  0474 	BCF   0x03,RP0
00C1 0092  0475 	MOVWF T2CON
           0476 			;	PIE1   = 0b00000010;				// Bit 1 enables TMR2 = PR2 interface
00C2 3002  0477 	MOVLW .2
00C3 1683  0478 	BSF   0x03,RP0
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 9

ADDR CODE  LINE SOURCE

00C4 008C  0479 	MOVWF PIE1
           0480 			;	PIR1   = 0b00000000;				// Read this to see if TMR2 = PR2 flag is set
00C5 1283  0481 	BCF   0x03,RP0
00C6 018C  0482 	CLRF  PIR1
           0483 			;	PR2 = 250;							// TMR2 match value, for 2ms ticks
00C7 30FA  0484 	MOVLW .250
00C8 1683  0485 	BSF   0x03,RP0
00C9 0092  0486 	MOVWF PR2
           0487 			;	MC14543_LD_CTRL=0;						// Disable loads to BCD driver
00CA 1283  0488 	BCF   0x03,RP0
00CB 1286  0489 	BCF   0x06,RB5
           0490 			;
           0491 			;	DispValue = 0xAAAA;
00CC 30AA  0492 	MOVLW .170
00CD 00B9  0493 	MOVWF DispValue
00CE 00BA  0494 	MOVWF DispValue+1
           0495 			;}
00CF 0008  0496 	RETURN
           0497 			;
           0498 			;void InitialiseGlobals(void) {
           0499 InitialiseGlobals
           0500 			;	T2ms = 0;							// Reset Timers
00D0 01B3  0501 	CLRF  T2ms
           0502 			;	T10ms = 0;
00D1 01B4  0503 	CLRF  T10ms
           0504 			;	T100ms = 0;
00D2 01B5  0505 	CLRF  T100ms
           0506 			;	SecondsFlag=0;
00D3 01BF  0507 	CLRF  SecondsFlag
           0508 			;	DigitCounter =0;
00D4 01B8  0509 	CLRF  DigitCounter
           0510 			;	DispValue = 0;
00D5 01B9  0511 	CLRF  DispValue
00D6 01BA  0512 	CLRF  DispValue+1
           0513 			;
           0514 			;	StartButtonState = StartButton;
00D7 01C0  0515 	CLRF  StartButtonState
00D8 1805  0516 	BTFSC 0x05,RA0
00D9 0AC0  0517 	INCF  StartButtonState,1
           0518 			;	StartButtonPrev = StartButtonState;
00DA 0840  0519 	MOVF  StartButtonState,W
00DB 00C1  0520 	MOVWF StartButtonPrev
           0521 			;	StartButtonCounter = 0;
00DC 01C2  0522 	CLRF  StartButtonCounter
           0523 			;	StopButtonState =0;
00DD 01C3  0524 	CLRF  StopButtonState
           0525 			;	StopButtonPrev =0;
00DE 01C4  0526 	CLRF  StopButtonPrev
           0527 			;	StopButtonCounter =0;
00DF 01C5  0528 	CLRF  StopButtonCounter
           0529 			;	State1 = STATE_STOPPED;
00E0 01C6  0530 	CLRF  State1
           0531 			;}
00E1 0008  0532 	RETURN
           0533 			;
           0534 			;void DisplayDigit(char DigitCounter){
           0535 DisplayDigit
00E2 00A1  0536 	MOVWF DigitCounter_2
           0537 			;
           0538 			;	DISP0=0;
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 10

ADDR CODE  LINE SOURCE

00E3 1305  0539 	BCF   0x05,RA6
           0540 			;	DISP1=0;
00E4 1206  0541 	BCF   0x06,RB4
           0542 			;	DISP2=0;
00E5 1185  0543 	BCF   0x05,RA3
           0544 			;	DISP3=0;
00E6 1105  0545 	BCF   0x05,RA2
           0546 			;
           0547 			;	DECIMAL=0;
00E7 1385  0548 	BCF   0x05,RA7
           0549 			;
           0550 			;//	Put current digit on PORTB lower nibble
           0551 			;	PORTB=PORTB&0b11110000;					// CLEAR PORTB LOWER NIBBLE
00E8 30F0  0552 	MOVLW .240
00E9 0586  0553 	ANDWF PORTB,1
           0554 			;//	PORTB=PORTB|DigitCounter;				// Write current digit to lower nibble of PORTB
           0555 			;
           0556 			;// Turn on only the digit of interest
           0557 			;
           0558 			;
           0559 			;		switch (DigitCounter) {
00EA 0821  0560 	MOVF  DigitCounter_2,W
00EB 1903  0561 	BTFSC 0x03,Zero_
00EC 28F7  0562 	GOTO  m012
00ED 3A01  0563 	XORLW .1
00EE 1903  0564 	BTFSC 0x03,Zero_
00EF 28FB  0565 	GOTO  m013
00F0 3A03  0566 	XORLW .3
00F1 1903  0567 	BTFSC 0x03,Zero_
00F2 28FF  0568 	GOTO  m014
00F3 3A01  0569 	XORLW .1
00F4 1903  0570 	BTFSC 0x03,Zero_
00F5 2904  0571 	GOTO  m015
00F6 2907  0572 	GOTO  m016
           0573 			;  			case 0:
           0574 			;				PORTB=PORTB|Digit[0];
00F7 083B  0575 m012	MOVF  Digit,W
00F8 0486  0576 	IORWF PORTB,1
           0577 			;				DISP0=1;								
00F9 1705  0578 	BSF   0x05,RA6
           0579 			;	   			break;
00FA 2907  0580 	GOTO  m016
           0581 			;  			case 1:
           0582 			;				PORTB=PORTB|Digit[1];
00FB 083C  0583 m013	MOVF  Digit+1,W
00FC 0486  0584 	IORWF PORTB,1
           0585 			;				DISP1=1;										
00FD 1606  0586 	BSF   0x06,RB4
           0587 			;	   			break;
00FE 2907  0588 	GOTO  m016
           0589 			;  			case 2:
           0590 			;				PORTB=PORTB|Digit[2];
00FF 083D  0591 m014	MOVF  Digit+2,W
0100 0486  0592 	IORWF PORTB,1
           0593 			;				DISP2=1;	
0101 1585  0594 	BSF   0x05,RA3
           0595 			;				DECIMAL=1;									
0102 1785  0596 	BSF   0x05,RA7
           0597 			;	   			break;
0103 2907  0598 	GOTO  m016
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 11

ADDR CODE  LINE SOURCE

           0599 			;  			case 3:
           0600 			;				PORTB=PORTB|Digit[3];
0104 083E  0601 m015	MOVF  Digit+3,W
0105 0486  0602 	IORWF PORTB,1
           0603 			;				DISP3=1;										
0106 1505  0604 	BSF   0x05,RA2
           0605 			;	   			break;
           0606 			;			default:
           0607 			;				break;
           0608 			;		}
           0609 			;	MC14543_LD_CTRL=1;						// Load digit into BCD driver.
0107 1686  0610 m016	BSF   0x06,RB5
           0611 			;    MC14543_LD_CTRL=0;						// Disable loads to BCD driver
0108 1286  0612 	BCF   0x06,RB5
           0613 			;}	
0109 0008  0614 	RETURN
           0615 			;
           0616 			;void Dec2BCD() {
           0617 Dec2BCD
           0618 			;	uns16 temp =0;
010A 01A1  0619 	CLRF  temp_2
010B 01A2  0620 	CLRF  temp_2+1
           0621 			;	//THIS CONVERTS 16BIT NO to 4 BCD bytes
           0622 			;	/*
           0623 			;		temp=DispValue%10;
           0624 			;		Digit[0]=temp;			
           0625 			;		temp=DispValue/10;		
           0626 			;		Digit[1]=temp%10;			
           0627 			;		temp=DispValue/100;	
           0628 			;		Digit[2]=temp%10;			
           0629 			;		temp=DispValue/1000;	
           0630 			;		Digit[3]=temp;
           0631 			;	*/
           0632 			;
           0633 			;	if (BlinkState == 1 && State1== STATE_PAUSED) {					// if paused and blinking = 1 (blank display)
010C 0B37  0634 	DECFSZ BlinkState,W
010D 2918  0635 	GOTO  m017
010E 0846  0636 	MOVF  State1,W
010F 3A02  0637 	XORLW .2
0110 1D03  0638 	BTFSS 0x03,Zero_
0111 2918  0639 	GOTO  m017
           0640 			;		Digit[0] = 0x0A;											// Non numerical characters are shown as
                    blank by BDC driver chip
0112 300A  0641 	MOVLW .10
0113 00BB  0642 	MOVWF Digit
           0643 			;		Digit[1] = 0x0A;								
0114 00BC  0644 	MOVWF Digit+1
           0645 			;		Digit[2] = 0x0A;
0115 00BD  0646 	MOVWF Digit+2
           0647 			;		Digit[3] = 0x0A;
0116 00BE  0648 	MOVWF Digit+3
           0649 			;	} else {														// push number to display 
0117 29C8  0650 	GOTO  m042
           0651 			;		temp=DispValue&0x00FF;										// need to set upper digits to blank if all lead
                   ing zeroes
0118 01A2  0652 m017	CLRF  temp_2+1
0119 0839  0653 	MOVF  DispValue,W
011A 00A1  0654 	MOVWF temp_2
           0655 			;		Digit[0]=temp%10;											// DIGIT0 = LS Digit 
011B 00A4  0656 	MOVWF C2tmp
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 12

ADDR CODE  LINE SOURCE

011C 0822  0657 	MOVF  temp_2+1,W
011D 00A5  0658 	MOVWF C2tmp+1
011E 01BB  0659 	CLRF  Digit
011F 3010  0660 	MOVLW .16
0120 00A3  0661 	MOVWF C1cnt
0121 0DA4  0662 m018	RLF   C2tmp,1
0122 0DA5  0663 	RLF   C2tmp+1,1
0123 0DBB  0664 	RLF   Digit,1
0124 1803  0665 	BTFSC 0x03,Carry
0125 292A  0666 	GOTO  m019
0126 300A  0667 	MOVLW .10
0127 023B  0668 	SUBWF Digit,W
0128 1C03  0669 	BTFSS 0x03,Carry
0129 292C  0670 	GOTO  m020
012A 300A  0671 m019	MOVLW .10
012B 02BB  0672 	SUBWF Digit,1
012C 0BA3  0673 m020	DECFSZ C1cnt,1
012D 2921  0674 	GOTO  m018
           0675 			;		temp=temp/10;
012E 0821  0676 	MOVF  temp_2,W
012F 00A4  0677 	MOVWF C4tmp
0130 0822  0678 	MOVF  temp_2+1,W
0131 00A5  0679 	MOVWF C4tmp+1
0132 01A6  0680 	CLRF  C5rem
0133 3010  0681 	MOVLW .16
0134 00A3  0682 	MOVWF C3cnt
0135 0DA4  0683 m021	RLF   C4tmp,1
0136 0DA5  0684 	RLF   C4tmp+1,1
0137 0DA6  0685 	RLF   C5rem,1
0138 1803  0686 	BTFSC 0x03,Carry
0139 293E  0687 	GOTO  m022
013A 300A  0688 	MOVLW .10
013B 0226  0689 	SUBWF C5rem,W
013C 1C03  0690 	BTFSS 0x03,Carry
013D 2941  0691 	GOTO  m023
013E 300A  0692 m022	MOVLW .10
013F 02A6  0693 	SUBWF C5rem,1
0140 1403  0694 	BSF   0x03,Carry
0141 0DA1  0695 m023	RLF   temp_2,1
0142 0DA2  0696 	RLF   temp_2+1,1
0143 0BA3  0697 	DECFSZ C3cnt,1
0144 2935  0698 	GOTO  m021
           0699 			;		Digit[1]=temp%10;
0145 0821  0700 	MOVF  temp_2,W
0146 00A4  0701 	MOVWF C7tmp
0147 0822  0702 	MOVF  temp_2+1,W
0148 00A5  0703 	MOVWF C7tmp+1
0149 01BC  0704 	CLRF  Digit+1
014A 3010  0705 	MOVLW .16
014B 00A3  0706 	MOVWF C6cnt
014C 0DA4  0707 m024	RLF   C7tmp,1
014D 0DA5  0708 	RLF   C7tmp+1,1
014E 0DBC  0709 	RLF   Digit+1,1
014F 1803  0710 	BTFSC 0x03,Carry
0150 2955  0711 	GOTO  m025
0151 300A  0712 	MOVLW .10
0152 023C  0713 	SUBWF Digit+1,W
0153 1C03  0714 	BTFSS 0x03,Carry
0154 2957  0715 	GOTO  m026
0155 300A  0716 m025	MOVLW .10
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 13

ADDR CODE  LINE SOURCE

0156 02BC  0717 	SUBWF Digit+1,1
0157 0BA3  0718 m026	DECFSZ C6cnt,1
0158 294C  0719 	GOTO  m024
           0720 			;		temp=DispValue;
0159 0839  0721 	MOVF  DispValue,W
015A 00A1  0722 	MOVWF temp_2
015B 083A  0723 	MOVF  DispValue+1,W
015C 00A2  0724 	MOVWF temp_2+1
           0725 			;		temp=temp>>8;												// temp is only 8 bit so now get upper 2
                    digits
015D 00A1  0726 	MOVWF temp_2
015E 01A2  0727 	CLRF  temp_2+1
           0728 			;		Digit[2]=temp%10;
015F 00A4  0729 	MOVWF C9tmp
0160 0822  0730 	MOVF  temp_2+1,W
0161 00A5  0731 	MOVWF C9tmp+1
0162 01BD  0732 	CLRF  Digit+2
0163 3010  0733 	MOVLW .16
0164 00A3  0734 	MOVWF C8cnt
0165 0DA4  0735 m027	RLF   C9tmp,1
0166 0DA5  0736 	RLF   C9tmp+1,1
0167 0DBD  0737 	RLF   Digit+2,1
0168 1803  0738 	BTFSC 0x03,Carry
0169 296E  0739 	GOTO  m028
016A 300A  0740 	MOVLW .10
016B 023D  0741 	SUBWF Digit+2,W
016C 1C03  0742 	BTFSS 0x03,Carry
016D 2970  0743 	GOTO  m029
016E 300A  0744 m028	MOVLW .10
016F 02BD  0745 	SUBWF Digit+2,1
0170 0BA3  0746 m029	DECFSZ C8cnt,1
0171 2965  0747 	GOTO  m027
           0748 			;		temp=temp/10;		
0172 0821  0749 	MOVF  temp_2,W
0173 00A4  0750 	MOVWF C11tmp
0174 0822  0751 	MOVF  temp_2+1,W
0175 00A5  0752 	MOVWF C11tmp+1
0176 01A6  0753 	CLRF  C12rem
0177 3010  0754 	MOVLW .16
0178 00A3  0755 	MOVWF C10cnt
0179 0DA4  0756 m030	RLF   C11tmp,1
017A 0DA5  0757 	RLF   C11tmp+1,1
017B 0DA6  0758 	RLF   C12rem,1
017C 1803  0759 	BTFSC 0x03,Carry
017D 2982  0760 	GOTO  m031
017E 300A  0761 	MOVLW .10
017F 0226  0762 	SUBWF C12rem,W
0180 1C03  0763 	BTFSS 0x03,Carry
0181 2985  0764 	GOTO  m032
0182 300A  0765 m031	MOVLW .10
0183 02A6  0766 	SUBWF C12rem,1
0184 1403  0767 	BSF   0x03,Carry
0185 0DA1  0768 m032	RLF   temp_2,1
0186 0DA2  0769 	RLF   temp_2+1,1
0187 0BA3  0770 	DECFSZ C10cnt,1
0188 2979  0771 	GOTO  m030
           0772 			;		Digit[3]=temp%10;
0189 0821  0773 	MOVF  temp_2,W
018A 00A4  0774 	MOVWF C14tmp
018B 0822  0775 	MOVF  temp_2+1,W
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 14

ADDR CODE  LINE SOURCE

018C 00A5  0776 	MOVWF C14tmp+1
018D 01BE  0777 	CLRF  Digit+3
018E 3010  0778 	MOVLW .16
018F 00A3  0779 	MOVWF C13cnt
0190 0DA4  0780 m033	RLF   C14tmp,1
0191 0DA5  0781 	RLF   C14tmp+1,1
0192 0DBE  0782 	RLF   Digit+3,1
0193 1803  0783 	BTFSC 0x03,Carry
0194 2999  0784 	GOTO  m034
0195 300A  0785 	MOVLW .10
0196 023E  0786 	SUBWF Digit+3,W
0197 1C03  0787 	BTFSS 0x03,Carry
0198 299B  0788 	GOTO  m035
0199 300A  0789 m034	MOVLW .10
019A 02BE  0790 	SUBWF Digit+3,1
019B 0BA3  0791 m035	DECFSZ C13cnt,1
019C 2990  0792 	GOTO  m033
           0793 			;		//temp=DispValue;//like the goggles, it does nothing!!
           0794 			;		
           0795 			;		// now use logic to set digits blank - no leading zeros
           0796 			;		
           0797 			;		
           0798 			;			
           0799 			;		if(State1==STATE_STARTED  ||  State1 == STATE_PAUSED){
019D 0346  0800 	DECF  State1,W
019E 1903  0801 	BTFSC 0x03,Zero_
019F 29A4  0802 	GOTO  m036
01A0 0846  0803 	MOVF  State1,W
01A1 3A02  0804 	XORLW .2
01A2 1D03  0805 	BTFSS 0x03,Zero_
01A3 29C8  0806 	GOTO  m042
           0807 			;			if (Digit[3] == 0){
01A4 08BE  0808 m036	MOVF  Digit+3,1
01A5 1D03  0809 	BTFSS 0x03,Zero_
01A6 29A9  0810 	GOTO  m037
           0811 			;			Digit[3] = 0x0A;
01A7 300A  0812 	MOVLW .10
01A8 00BE  0813 	MOVWF Digit+3
           0814 			;			}
           0815 			;			if (Digit[2] == 0 && (Digit[3] == 0 || Digit[3] == 0x0A)){
01A9 08BD  0816 m037	MOVF  Digit+2,1
01AA 1D03  0817 	BTFSS 0x03,Zero_
01AB 29B5  0818 	GOTO  m039
01AC 08BE  0819 	MOVF  Digit+3,1
01AD 1903  0820 	BTFSC 0x03,Zero_
01AE 29B3  0821 	GOTO  m038
01AF 083E  0822 	MOVF  Digit+3,W
01B0 3A0A  0823 	XORLW .10
01B1 1D03  0824 	BTFSS 0x03,Zero_
01B2 29B5  0825 	GOTO  m039
           0826 			;			Digit[2] = 0x0A;
01B3 300A  0827 m038	MOVLW .10
01B4 00BD  0828 	MOVWF Digit+2
           0829 			;			}
           0830 			;			if (Digit[1] == 0 && (Digit[2] == 0 || Digit[2] == 0x0A)&& (Digit[2] == 0 || Digit[2] == 0x0A) ){
01B5 08BC  0831 m039	MOVF  Digit+1,1
01B6 1D03  0832 	BTFSS 0x03,Zero_
01B7 29C8  0833 	GOTO  m042
01B8 08BD  0834 	MOVF  Digit+2,1
01B9 1903  0835 	BTFSC 0x03,Zero_
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 15

ADDR CODE  LINE SOURCE

01BA 29BF  0836 	GOTO  m040
01BB 083D  0837 	MOVF  Digit+2,W
01BC 3A0A  0838 	XORLW .10
01BD 1D03  0839 	BTFSS 0x03,Zero_
01BE 29C8  0840 	GOTO  m042
01BF 08BD  0841 m040	MOVF  Digit+2,1
01C0 1903  0842 	BTFSC 0x03,Zero_
01C1 29C6  0843 	GOTO  m041
01C2 083D  0844 	MOVF  Digit+2,W
01C3 3A0A  0845 	XORLW .10
01C4 1D03  0846 	BTFSS 0x03,Zero_
01C5 29C8  0847 	GOTO  m042
           0848 			;			Digit[1] = 0x0A;
01C6 300A  0849 m041	MOVLW .10
01C7 00BC  0850 	MOVWF Digit+1
           0851 			;			}
           0852 			;
           0853 			;		}		
           0854 			;		
           0855 			;/*		if (Digit[3] == 0 && Digit[2] == 0 && Digit[1] == 0 && Digit[0] == 0){
           0856 			;			Digit[0] = 0x0A;
           0857 			;		}*/
           0858 			;		// NO - ALWAYS HAVE Digit[0] set to valid number - will blink '0' if pasued at zero
           0859 			;		// and will not show 0 when timer starts		
           0860 			;	}
           0861 			;}
01C8 0008  0862 m042	RETURN
           0863 			;
           0864 			;void debounce(char test, char *state, char *counter) {
           0865 debounce
           0866 			;	if ((*state) != test) {
01C9 1383  0867 	BCF   0x03,IRP
01CA 0830  0868 	MOVF  state,W
01CB 0084  0869 	MOVWF FSR
01CC 0800  0870 	MOVF  INDF,W
01CD 062F  0871 	XORWF test,W
01CE 1903  0872 	BTFSC 0x03,Zero_
01CF 29E5  0873 	GOTO  m043
           0874 			;   	(*counter)++;
01D0 1383  0875 	BCF   0x03,IRP
01D1 0831  0876 	MOVF  counter,W
01D2 0084  0877 	MOVWF FSR
01D3 0A80  0878 	INCF  INDF,1
           0879 			;		if ((*counter) >= MAX_DEBOUNCE_COUNT) {
01D4 1383  0880 	BCF   0x03,IRP
01D5 0831  0881 	MOVF  counter,W
01D6 0084  0882 	MOVWF FSR
01D7 300A  0883 	MOVLW .10
01D8 0200  0884 	SUBWF INDF,W
01D9 1C03  0885 	BTFSS 0x03,Carry
01DA 29E9  0886 	GOTO  m044
           0887 			;			(*counter) = 0;
01DB 1383  0888 	BCF   0x03,IRP
01DC 0831  0889 	MOVF  counter,W
01DD 0084  0890 	MOVWF FSR
01DE 0180  0891 	CLRF  INDF
           0892 			;			(*state) = test;
01DF 1383  0893 	BCF   0x03,IRP
01E0 0830  0894 	MOVF  state,W
01E1 0084  0895 	MOVWF FSR
CC5X Version 3.2,   File: TIMER.c              2. Sep 2011  12:59   Page 16

ADDR CODE  LINE SOURCE

01E2 082F  0896 	MOVF  test,W
01E3 0080  0897 	MOVWF INDF
           0898 			;		}
           0899 			;	} else {
01E4 29E9  0900 	GOTO  m044
           0901 			;		(*counter) = 0;
01E5 1383  0902 m043	BCF   0x03,IRP
01E6 0831  0903 	MOVF  counter,W
01E7 0084  0904 	MOVWF FSR
01E8 0180  0905 	CLRF  INDF
           0906 			;	}
           0907 			;}
01E9 0008  0908 m044	RETURN
           0909 
     0000  0910 	ORG 0x2007
2007 3F58  0911 	DATA 3F58H
     0000  0912 	END
     0000  0913 
     0000  0914 
     0000  0915 ; *** KEY INFO ***
     0000  0916 
     0000  0917 ; 0x00AA   38 word(s)  3 % : InitialiseHardware
     0000  0918 ; 0x00D0   18 word(s)  1 % : InitialiseGlobals
     0000  0919 ; 0x00E2   40 word(s)  3 % : DisplayDigit
     0000  0920 ; 0x010A  191 word(s) 18 % : Dec2BCD
     0000  0921 ; 0x01C9   33 word(s)  3 % : debounce
     0000  0922 ; 0x0004   60 word(s)  5 % : IntHandler
     0000  0923 ; 0x0040  106 word(s) 10 % : main
     0000  0924 
     0000  0925 ; RAM usage: 40 bytes (19 local), 184 bytes free
     0000  0926 ; Maximum call level: 1 (+2 for interrupt)
     0000  0927 ; Total of 487 code words (47 %)
